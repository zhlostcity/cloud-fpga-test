#
# Copyright (C) 2019
# Author: Shanquan Tian <shanquan.tian@yale.edu>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
#

import datetime
from subprocess import call
import time
import subprocess
import json
import struct
import urllib
import threading

agfi_experi = 'agfi-0f3ebc2c16f3e106c' # load the image cl_dram_ecc_off
agfi_idle = 'agfi-0fcf87119b8e97bf3'   # load the image cl-hello-world, which is pre-generated by Amazon

def dramReadOnly (slot, instanceId, ipAddress, message):
    today = str(datetime.datetime.today())
    today = today[0:10]+"_"+today[11:13]+"-"+today[14:16]
    folderName = instanceId +"_"+ today +"_" + ipAddress + "_slot"+ str(slot) + "_" + message
    ret = call(['mkdir', folderName])
    # First, clean images
    ret = call(['sudo', 'fpga-clear-local-image', '-S', str(slot) ])
    time.sleep(1)

    Sleep_Time_Seconds = 120 # ************************* waiting period for error bits **************************

    time_now = str(datetime.datetime.now())
    time_now = time_now[0:10]+"_"+time_now[11:13]+"-"+time_now[14:16]
    subFolderName = str(Sleep_Time_Seconds)+"s_" + str(time_now)
    ret = call(['mkdir', "./"+folderName + "/" + subFolderName])
    fA = open("./"+folderName + "/" + subFolderName +"/A.dat", "wb" )
    fB = open("./"+folderName + "/" + subFolderName +"/B.dat", "wb" )
    fC = open("./"+folderName + "/" + subFolderName +"/C.dat", "wb" )
    fD = open("./"+folderName + "/" + subFolderName +"/D.dat", "wb" )

    ret = call(['sudo', 'fpga-load-local-image', '-S', str(slot), '-I', agfi_experi]) # load the image for dram no flushing
    ret = call(['sudo', './test_dram_dma', '1', str(slot)])                           # write data to dram
    ret = call(['sudo', 'fpga-load-local-image', '-S', str(slot), '-I', agfi_idle])   # load the image cl-fifo
    time.sleep(Sleep_Time_Seconds)
    ret = call(['sudo', 'fpga-load-local-image', '-S', str(slot), '-I', agfi_experi]) # load the image for dram no flushing
    p = subprocess.Popen(["sudo", "./test_dram_dma", "2", str(slot)], stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.STDOUT)# read data from dram
    line =  p.stdout.readline()
    print "DDR A\n"
    count = 0    
    while line != "DDR B\n":
        line =  p.stdout.readline()
        if (line != 'ffffffff\n'):
            count = count + 1
            if (count % 1000 == 0):
                print (count)
        if (line != "DDR B\n"):
            a = int(line.split()[0], 16)
            a = struct.pack('>I', a)
            fA.write(a)
    print "DDR B\n"
    count = 0
    while line != "DDR C\n":
        line =  p.stdout.readline()
        if (line != 'ffffffff\n'):
            count = count + 1
            if (count % 1000 == 0):
                print (count)
        if (line != "DDR C\n"):
            a = int(line.split()[0], 16)
            a = struct.pack('>I', a)
            fB.write(a)
    print "DDR C\n"
    count = 0
    while line != "DDR D\n":
        line =  p.stdout.readline()
        if (line != 'ffffffff\n'):
            count = count + 1
            if (count % 1000 == 0):
                print (count)
        if (line != "DDR D\n"):
            a = int(line.split()[0], 16)
            a = struct.pack('>I', a)
            fC.write(a)
    print "DDR D\n"
    count = 0
    while line.split()[0] != 'TEST':
        line =  p.stdout.readline()
        if (line != 'ffffffff\n'):
            count = count + 1
            if (count % 1000 == 0):
                print (count)
        if (line.split()[0] != 'TEST'):
            a = int(line.split()[0], 16)
            a = struct.pack('>I', a)
            fD.write(a)
    fA.close()
    fB.close()
    fC.close()
    fD.close()
    time_now = str(datetime.datetime.now())
    time_now = time_now[0:10]+"_"+time_now[11:13]+"-"+time_now[14:16]
    ret = call(["mv", "./"+folderName + "/" + subFolderName +"/A.dat", "./"+folderName + "/" + subFolderName +"/A_"+str(time_now)+".dat" ])
    ret = call(["mv", "./"+folderName + "/" + subFolderName +"/B.dat", "./"+folderName + "/" + subFolderName +"/B_"+str(time_now)+".dat" ])
    ret = call(["mv", "./"+folderName + "/" + subFolderName +"/C.dat", "./"+folderName + "/" + subFolderName +"/C_"+str(time_now)+".dat" ])
    ret = call(["mv", "./"+folderName + "/" + subFolderName +"/D.dat", "./"+folderName + "/" + subFolderName +"/D_"+str(time_now)+".dat" ])
    print("Finish slot "+ str(slot) +" experiments under time interval "+str(Sleep_Time_Seconds)+" seconds.\t" +str(time_now)+" \n")
    ret = call(['sudo', 'fpga-clear-local-image', '-S', str(slot) ])

